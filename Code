import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_ selection import train_test_ split
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification report
import re
import string
data fake =pd.read csv("Fake.csv")
data true = pd.read csv('True.csv")
data_fake.head
data_true.head()
data_fake_manual_testing = data_fake.tail(10)
for i in range(23480,23470,-1):
data_fake.drop([i], axis = 0, inplace = True)
data_true_manual testing = datp_true.tail(10)
for i in range(21416,21406,-1):
data_true.drop([i], axis = 0, inplace = True)
data_fake.shape, data_true.shape
data_fake_manual_testing['class']= 0
data_true_ manual_testing['class'] = 1
data_fake_manual testing.head(10)
data_merge = pd.concat([data_fake,data_true],axis =0)
data_merge.head(10)
data.merge.columns
data_merge.columns
data = data_merge.drop(['title subject
date'], axis = 1)
data.isnull().sum()
data = data.sample(frac = 1)
data.head()
data.reset_index(inplace = True)
data.drop(['index'], axis = l, inplace = True)
data.columns
data['text'] = data['text'].apply(wordopt)
x = data['text']
y= data['class ]
z_train, x_test, y_train, y_test = train_test_split(x,y, test_size= 0.250
from sklearn.feature_extraction.text import TfidVectorizer
vectorization = TfidVectorizer()
xv_train = vectorization.fit_transform(x_train)
xv test = vectorization.transform(x test)
from sklearn.linear_model import LogisticRegression
LR = LogisticRegression()
LR.fit(xv_train, y_train)
pred_lr = LR.predict(xv_test)
LR.score(xv_test, y_test)
print(classification_report(y_test, pred_lr))
from sklearn.tree import DecisionTreeClassifier
DT = DecisionTreeClassifier()
DecisjonTreeClassifier
from sklearn.tree import DecisionTreeClassifier
DT = DecisionTreeClassifier()
DT.fit(xv_train, y_train)
pred_dt = DT.predict(xv test)
DT.score(xv_test, y_test)
|from sklearn.ensemble impor) GradientBoostingClassifier
GB = GradientBoostingClassifier(random_state = 0)
GB.fit(xv_train, y_train)
predit_gb = GB.predict(xv_test)
GB.score(xv_test, y_test)
print(classification_report(y_test, pred_gb))
from sklearn.ensemble import RandomForestClassifier
RF = RandomForestClassifier(random_state = 0)
RF.fit(xv_train, y_train)
pred_rf = RF.predcit(xv_test)
RF.score(xv_test, y_test)
print(classification_report(y_test, pred_r))
news = string(input())
manual_testing(news)
